(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{100:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(8),r=(n(0),n(110)),o={id:"verifiable-paystring-tutorial",title:"Verifiable PayString",sidebar_label:"Verifiable PayString"},l={unversionedId:"verifiable-paystring-tutorial",id:"verifiable-paystring-tutorial",isDocsHomePage:!1,title:"Verifiable PayString",description:"PayString was previously known as PayID.",source:"@site/docs/verifiable-paystring-tutorial.md",slug:"/verifiable-paystring-tutorial",permalink:"/paystring-documentation/review-apps/docforcedev-patch-1/417367/verifiable-paystring-tutorial",editUrl:"https://github.com/paystring/paystring-documentation/tree/master/docs/verifiable-paystring-tutorial.md",version:"current",sidebar_label:"Verifiable PayString",sidebar:"docs",previous:{title:"PayString CLI",permalink:"/paystring-documentation/review-apps/docforcedev-patch-1/417367/paystring-cli"},next:{title:"RippleX Dev Kit and PayString",permalink:"/paystring-documentation/review-apps/docforcedev-patch-1/417367/ripplex-dev-kit-paystring-get-started"}},s=[],c={rightToc:s};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"PayString was previously known as PayID."))),Object(r.b)("p",null,"In this guide, you will deploy a local PayString server, create a PayString, sign and verify the PayString, and test it using calls to the PayString Admin API. If you want to use base PayString without verification, see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/"}),"Getting Started"),"."),Object(r.b)("p",null,"For more information about Verifiable PayString, see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"verifiable-paystring"}),"Enhance Security With Verifiable PayString"),"."),Object(r.b)("p",null,"Before you begin:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Deploy a PayString server locally. See ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/#run-a-paystring-server"}),"Getting Started: Deploy a PayString Server"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"paystring-cli"}),"Install PayString CLI"),". You will use the command line to perform the tasks in this tutorial.")),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Open the command line. Enter ",Object(r.b)("inlineCode",{parentName:"li"},"payid"),". You can now enter commands in interactive mode."),Object(r.b)("li",{parentName:"ol"},"See the available commands: enter ",Object(r.b)("inlineCode",{parentName:"li"},"help"),". Note the commands related to signing and verifying PayStrings."),Object(r.b)("li",{parentName:"ol"},"Create an empty PayString: ",Object(r.b)("inlineCode",{parentName:"li"},"init verifiabledemo$127.0.0.1"),"."),Object(r.b)("li",{parentName:"ol"},"Add a crypto address:",Object(r.b)("inlineCode",{parentName:"li"},"crypto-address add XRPL TESTNET rDk7FQvkQxQQNGTtfM2Fr66s7Nm3k87vdS"),". This command specifies the relevant ",Object(r.b)("inlineCode",{parentName:"li"},"paymentNetwork"),", ",Object(r.b)("inlineCode",{parentName:"li"},"environment"),", and ",Object(r.b)("inlineCode",{parentName:"li"},"address")," for your ledger."),Object(r.b)("li",{parentName:"ol"},"Generate a user identity key:",Object(r.b)("inlineCode",{parentName:"li"},"keys generate"),". This key is stored locally at the specified location. Make sure you keep the key in a safe place."),Object(r.b)("li",{parentName:"ol"},"Sign the PayString with the user identity key to create a verified PayString and address payload: ",Object(r.b)("inlineCode",{parentName:"li"},"sign"),"."),Object(r.b)("li",{parentName:"ol"},"Remove the unverified crypto address: ",Object(r.b)("inlineCode",{parentName:"li"},"crypto-address remove rDk7FQvkQxQQNGTtfM2Fr66s7Nm3k87vdS"),". The output payload should have this format:")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  "payId": "verifiabledemo$127.0.0.1",\n  "addresses": [],\n  "verifiedAddresses": [\n    {\n      "payload": "{\\"payId\\":\\"test$example.com\\",\\"payIdAddress\\":{\\"paymentNetwork\\":\\"XRPL\\",\\"environment\\":\\"TESTNET\\",\\"addressDetailsType\\":\\"CryptoAddressDetails\\",\\"addressDetails\\":{\\"address\\":\\"rDk7FQvkQxQQNGTtfM2Fr66s7Nm3k87vdS\\"}}}",\n      "signatures": [\n        {\n          "protected": "eyJuYW1lIjoiaWRlbnRpdHlLZXkiLCJhbGciOiJFUzI1NksiLCJ0eXAiOiJKT1NFK0pTT04iLCJiNjQiOmZhbHNlLCJjcml0IjpbImI2NCIsIm5hbWUiXSwiandrIjp7ImNydiI6InNlY3AyNTZrMSIsIngiOiI2S0dtcEF6WUhWUm9qVmU5UEpfWTVyZHltQ21kTy1xaVRHem1Edl9waUlvIiwieSI6ImhxS3Vnc1g3Vjk3eFRNLThCMTBONUQxcW44MUZWMjItM1p0TURXaXZfSnciLCJrdHkiOiJFQyIsImtpZCI6Im4zNlhTc0M1TjRnNUtCVzRBWXJ5d1ZtRE1kUWNEV1BJX0RfNUR1UlNhNDAifX0",\n          "signature": "rsoKeVLzwg2PpGRK0S10fpmh5WNtttF9dyJgSv3USEr4aN3bUBzp5ImRQo8wlh3E00GtZ2cse-lhoQ4zJKj0Jw"\n        }\n      ]\n    }\n  ]\n}\n')),Object(r.b)("ol",{start:8},Object(r.b)("li",{parentName:"ol"},"Upload the verified PayString. If you are using the PayString Admin API version from 2020-08-25 or later, POST the payload from Step 7 to the Admin API endpoint. See ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://api.paystring.org"}),"PayString API Reference"),". As mentioned, you must have a PayString server deployed to use this API.\nIf you use the PayString Admin API version from before 2020-08-25, then you must modify this payload.",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"identityKey")," should have the contents of the ",Object(r.b)("inlineCode",{parentName:"li"},"protected")," field in Step 7."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"verifiedAddresses")," should be the un-stringified JSON contents of the ",Object(r.b)("inlineCode",{parentName:"li"},"payload")," field in Step 7."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"identityKeySignature")," should be the ",Object(r.b)("inlineCode",{parentName:"li"},"signature")," field in Step 7.\nThe payload for older versions of the PayString Admin API appears as follows:")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n   "payId": "verifiabledemo$127.0.0.1",\n   "identityKey": "eyJuYW1lIjoiaWRlbnRpdHlLZXkiLCJhbGciOiJFUzI1NksiLCJ0eXAiOiJKT1NFK0pTT04iLCJiNjQiOmZhbHNlLCJjcml0IjpbImI2NCIsIm5hbWUiXSwiandrIjp7ImNydiI6InNlY3AyNTZrMSIsIngiOiI2S0dtcEF6WUhWUm9qVmU5UEpfWTVyZHltQ21kTy1xaVRHem1Edl9waUlvIiwieSI6ImhxS3Vnc1g3Vjk3eFRNLThCMTBONUQxcW44MUZWMjItM1p0TURXaXZfSnciLCJrdHkiOiJFQyIsImtpZCI6Im4zNlhTc0M1TjRnNUtCVzRBWXJ5d1ZtRE1kUWNEV1BJX0RfNUR1UlNhNDAifX0",\n   "addresses": [],\n   "verifiedAddresses": [\n       {\n           "paymentNetwork": "XRPL",\n           "environment": "TESTNET",\n           "details": {\n               "address": "rDk7FQvkQxQQNGTtfM2Fr66s7Nm3k87vdS"\n           },\n           "identityKeySignature": "rsoKeVLzwg2PpGRK0S10fpmh5WNtttF9dyJgSv3USEr4aN3bUBzp5ImRQo8wlh3E00GtZ2cse-lhoQ4zJKj0Jw"\n       }\n   ]\n}\n')),Object(r.b)("ol",{start:9},Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Retrieve and verify the verified PayString using PayString CLI. These commands do not use interactive mode."),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"   payid load verifiabledemo$127.0.0.11\n   payid inspect\n   payid verify\n"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"Verify the PayString from the PayString Public API endpoint with GET. See ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://api.paystring.org/"}),"API Reference"),". You can also use a JWS library like ",Object(r.b)("inlineCode",{parentName:"p"},"jose")," to verify the ",Object(r.b)("inlineCode",{parentName:"p"},"verifiedAddress")," object(s).")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"If operating through a trust on first use (TOFU) model, safely store the identity key after successful verification, and use this key to verify subsequent addresses retrieved from the same PayString."))))}p.isMDXComponent=!0},110:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return y}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,y=d["".concat(o,".").concat(m)]||d[m]||b[m]||r;return n?i.a.createElement(y,l(l({ref:t},c),{},{components:n})):i.a.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);