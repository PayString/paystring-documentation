(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{110:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return y}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},b=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),b=l(r),u=n,y=b["".concat(o,".").concat(u)]||b[u]||d[u]||i;return r?a.a.createElement(y,c(c({ref:t},p),{},{components:r})):a.a.createElement(y,c({ref:t},p))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var p=2;p<i;p++)o[p]=r[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},95:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return s})),r.d(t,"default",(function(){return l}));var n=r(3),a=r(8),i=(r(0),r(110)),o={id:"paystring-discovery",title:"Discover a PayString",sidebar_label:"Discover a PayString"},c={unversionedId:"paystring-discovery",id:"paystring-discovery",isDocsHomePage:!1,title:"Discover a PayString",description:"PayString was previously known as PayID.",source:"@site/docs/paystring-discovery.md",slug:"/paystring-discovery",permalink:"/paystring-documentation/review-apps/fix-prettier/247210/paystring-discovery",editUrl:"https://github.com/paystring/paystring-documentation/tree/master/docs/paystring-discovery.md",version:"current",sidebar_label:"Discover a PayString",sidebar:"docs",previous:{title:"Enhance Security With Verifiable PayString",permalink:"/paystring-documentation/review-apps/fix-prettier/247210/verifiable-paystring"},next:{title:"Security Best Practices",permalink:"/paystring-documentation/review-apps/fix-prettier/247210/best-practices"}},s=[{value:"PayString discovery by a wallet application",id:"paystring-discovery-by-a-wallet-application",children:[]},{value:"PayString discovery with a default template",id:"paystring-discovery-with-a-default-template",children:[]}],p={rightToc:s};function l(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"PayString was previously known as PayID."))),Object(i.b)("p",null,"The PayString Discovery endpoint facilitates finding the PayString URI for a given PayString."),Object(i.b)("h2",{id:"paystring-discovery-by-a-wallet-application"},"PayString discovery by a wallet application"),Object(i.b)("p",null,"Suppose Alice wants to send Bob some XRP from a web-based wallet provider that Alice has an account on. Alice logs in to the wallet provider and enter Bob's PayString, such as ",Object(i.b)("inlineCode",{parentName:"p"},"bob$receiver.example.com"),", into the wallet UI to start the payment. If the wallet application is set up to use the PayString Discovery endpoint, the wallet application performs a WebFinger query that looks for the PayString Discovery service provider, like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"GET /.well-known/webfinger?resource=payid%3Abob%24receiver.example.com\nHTTP/1.1\nHost: receiver.example.com\n")),Object(i.b)("p",null,"If the server for Bob's exchange, where Bob receives currency, supports the PayString Discovery endpoint, it responds like this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),' HTTP/1.1 200 OK\n Access-Control-Allow-Origin: *\n Content-Type: application/jrd+json\n\n {\n   "subject" : "payid:bob$receiver.example.com",\n   "links" :\n   [\n     {\n       "rel": "https://paystring.org/ns/payid-uri-template/1.0",\n       "template": "https://receiver.example.com/users/{acctpart}"\n     }\n   ]\n }\n')),Object(i.b)("p",null,'Alice\'s wallet can then use the URL template found in the "template" property to assemble the specified PayString URL. Typically, this template might add a folder structure to the URL, such as ',Object(i.b)("inlineCode",{parentName:"p"},"https://receiver.example.com/users/bob"),". The server can be set up to use other URL formats, so long as the resulting URL is valid and represents Bob's PayString."),Object(i.b)("h2",{id:"paystring-discovery-with-a-default-template"},"PayString discovery with a default template"),Object(i.b)("p",null,"In this case, Alice's wallet application makes the same request as previously, but Bob's server does not support Webfinger, and returns ",Object(i.b)("inlineCode",{parentName:"p"},"HTTP/1.1 404 NOT FOUND"),"."),Object(i.b)("p",null,"The wallet application then uses a default template to transform ",Object(i.b)("inlineCode",{parentName:"p"},"bob$receiever.example.com"),"\nto ",Object(i.b)("inlineCode",{parentName:"p"},"https://receiver.example.com/bob"),". The wallet then uses this URL to continue making the payment. Alice's wallet proceeds to make the payment."))}l.isMDXComponent=!0}}]);